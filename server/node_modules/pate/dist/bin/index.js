"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const perf_hooks_1 = require("perf_hooks");
const yargs = require("yargs");
const _1 = require("../");
const logger_1 = require("../logger");
const utils_1 = require("../utils");
const APP_NAME = 'pate';
const argv = yargs
    .usage(`Usage: $0 [-v|--verbose] [-o|--output FILE] [-g|--glob 'glob pattern']
          [-i|--ignore 'ignore pattern'] -m [MATCHPATTERN] -p [PATH]`)
    .example('$0', `To look for every 'require' word in the js files inside node_modules,
            saving the result to result.txt, you'd do:\n
            ${APP_NAME} -g '*.js' -o result.txt -m require -p ./node_modules`)
    .demandOption(['m', 'p'])
    .alias('m', 'match')
    .describe('m', 'match pattern to look for in the files located in PATH')
    .alias('p', 'path')
    .describe('p', 'path where files will be collected')
    .alias('g', 'glob')
    .describe('g', 'Filter files in PATH via a glob pattern. Note: it needs quotes to be properly parsed.')
    .default('g', '*.*')
    .alias('o', 'output')
    .describe('o', 'file which will contain the list of the files in PATH that match MATCHPATTERN')
    .boolean('verbose')
    .alias('v', 'verbose')
    .describe('v', 'Show current operation details in real-time')
    .default('v', false)
    .alias('i', 'ignore')
    .describe('i', 'pattern that defines folders or files to exclude from the discovery')
    .array('i')
    .default('i', [])
    .epilogue(`Developed by jkomyno - Copyright 2017\nSubmit issues at https://github.com/jkomyno/${APP_NAME}`)
    .strict()
    .argv;
const { path: searchPath, glob: globPattern, ignore: ignorePattern, match, output, verbose, } = argv;
const matchPattern = new RegExp(match);
const barStyle = `Searching pattern, remaining :etas [${chalk_1.default.blue(':bar')}] ${chalk_1.default.green(':percent')} completed`;
const barOptions = {
    complete: '=',
    incomplete: ' ',
    width: 30,
};
const options = {
    barOptions,
    barStyle,
    globPattern,
    ignorePattern,
    verbose,
};
(async () => {
    const logger = new logger_1.default(options.verbose);
    try {
        logger.log('Indexing files');
        perf_hooks_1.performance.mark(`start-${APP_NAME}`);
        const { matchedFiles, skippedFiles, } = await _1.default(matchPattern, searchPath, options);
        perf_hooks_1.performance.mark(`end-${APP_NAME}`);
        perf_hooks_1.performance.measure('pate', `start-${APP_NAME}`, `end-${APP_NAME}`);
        const { duration } = perf_hooks_1.performance.getEntriesByName('pate')[0];
        logger.success('Pattern found', `in ${matchedFiles.length} files`, true);
        if (output) {
            await utils_1.writeArrayToFile(output, matchedFiles);
        }
        else {
            matchedFiles.forEach((item) => {
                logger.log('- ', item, true);
            });
        }
        if (skippedFiles.length) {
            logger.warn('\nSome files were skipped.');
            if (options.verbose) {
                skippedFiles.forEach((item) => {
                    logger.warn('‚ùØ ', item, true);
                });
            }
        }
        logger.log(`Pate's discovery process took`, `${duration / 1000} s`);
    }
    catch (error) {
        logger.error('Process terminated due to unknown error', error);
        process.exit(1);
    }
})();
