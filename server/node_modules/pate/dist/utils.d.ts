import { PromiseFactoryT } from './core';
export declare type fsOpenPromiseT = (path: string, flags: string) => Promise<number>;
export declare type fsClosePromiseT = (fd: number) => Promise<void>;
export interface IGlobOptions {
    cwd?: string;
    strict?: boolean;
    realpath?: boolean;
    matchBase?: boolean;
    silent?: boolean;
    ignore?: string[];
}
export declare type globPromiseT = (pattern: string, options: IGlobOptions) => Promise<string[]>;
export declare const fsClosePromise: fsClosePromiseT;
export declare const fsOpenPromise: fsOpenPromiseT;
export declare const globPromise: globPromiseT;
export declare function serialize<T>(promise: Promise<T[]>, promiseFactory: PromiseFactoryT<T>): Promise<T[]>;
export declare function serializePromise<T>(promiseFactories: Array<PromiseFactoryT<T>>): Promise<T[]>;
export declare function writeArrayToFile<T>(outputFile: string, data: T[]): Promise<{}>;
